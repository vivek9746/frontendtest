{"version":3,"sources":["components/Modal.js","components/UserList.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","setAppElement","ModalView","props","isOpen","onRequestClose","style","overlay","backgroundColor","content","color","children","UserList","useState","error","setError","isLoaded","setIsLoaded","items","setItems","modalIsOpen","setModalIsOpen","employeeName","setEmployeeName","employeeCountry","setEmployeeCountry","employeeTimeArray","setEmployeeTimeArray","Date","value","setValue","inputArray","setInputArray","startTime","setStartTime","endTime","setendTime","onChange","v","e","console","log","formattedDate","toLocaleDateString","month","day","year","replace","findResult","filter","date","tempdate","split","transformDate","start_time","length","end_time","useEffect","fetch","headers","then","res","json","result","members","message","className","map","element","onClick","emp","activity_periods","real_name","tz","temp","forEach","ele","push","openModal","id","event","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAGAA,IAAMC,cAAc,SAqBLC,MApBf,SAAmBC,GACf,OACI,8BACI,cAAC,IAAD,CAAOC,OAAQD,EAAMC,OAAQC,eAAgBF,EAAME,eACnDC,MAAO,CACHC,QAAQ,CACJC,gBAAgB,mBAEpBC,QAAQ,CACJC,MAAM,UANd,SAWIP,EAAMQ,c,sBC0JPC,MArKf,WAAoB,MAGQC,mBAAS,MAHjB,mBAGXC,EAHW,KAGJC,EAHI,OAIcF,oBAAS,GAJvB,mBAIXG,EAJW,KAIDC,EAJC,OAKQJ,mBAAS,IALjB,mBAKXK,EALW,KAKJC,EALI,OAMoBN,oBAAS,GAN7B,mBAMXO,EANW,KAMEC,EANF,OAOsBR,mBAAS,IAP/B,mBAOXS,EAPW,KAOGC,EAPH,OAQ4BV,mBAAS,IARrC,mBAQXW,EARW,KAQMC,EARN,OAS8BZ,mBAAS,IATvC,mBASba,EATa,KASMC,EATN,OAUQd,mBAAS,IAAIe,MAVrB,mBAUXC,EAVW,KAUJC,EAVI,OAWgBjB,mBAAS,IAXzB,mBAWbkB,EAXa,KAWDC,EAXC,OAYgBnB,mBAAS,wBAZzB,mBAYXoB,EAZW,KAYAC,EAZA,OAaYrB,mBAAS,wBAbrB,mBAaXsB,EAbW,KAaFC,EAbE,KAyBZC,EAAW,SAACC,EAAGC,GACnBC,QAAQC,IAAI,SAAUH,GACtBR,EAASQ,GAET,IAAMI,EAAgBJ,EAAEK,mBAAmB,QAAS,CAClDC,MAAO,QAASC,IAAK,UAAWC,KAAM,YACrCC,QAAQ,KAAM,KAAKA,QAAQ,IAAK,IAGnCP,QAAQC,IAAIC,GAEZF,QAAQC,IAAIf,GACZ,IAAIsB,EAAa,GACjBA,EAAatB,EAAkBuB,QAAO,SAAAvB,GAAiB,OArBnC,SAACwB,GACrBV,QAAQC,IAAIS,GACZ,IAAIC,EAAWD,EAAKE,MAAM,KAG1B,OAFoBD,EAAS,GAAK,IAAMA,EAAS,GAAK,IAAMA,EAAS,GAkBVE,CAAc3B,EAAkB4B,cAAgBZ,KAC3GF,QAAQC,IAAIO,GACRA,EAAWO,OAAS,GACtBrB,EAAac,EAAW,GAAGM,WAAWF,MAAM,KAAK,IACjDhB,EAAWY,EAAW,GAAGQ,SAASJ,MAAM,KAAK,MAG7ClB,EAAa,sBACbE,EAAW,wBAgEf,OA3DAqB,qBAAU,WAERC,MAAM,iBAAkB,CACtBC,QAAS,CACP,eAAgB,mBAChB,OAAU,sBAGXC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC9C,GAAY,GACZE,EAAS4C,EAAOC,YAKlB,SAAClD,GACCG,GAAY,GACZF,EAASD,QAGd,IAqCCA,EACK,0CAAaA,EAAMmD,WAChBjD,EAKR,gCACE,qBAAKkD,UAAU,QAAf,SACA,6BAEIhD,EAAMiD,KAAI,SAACC,GAAD,OACR,qBAAsBC,QAAS,YA/CzB,SAACC,GAYjB3C,EAAqB2C,EAAIC,kBACzB/B,QAAQC,IAAI,mBAAoBf,GAEhCc,QAAQC,IAAI,cAAe6B,GAC3BjD,GAAe,GACfE,EAAgB+C,EAAIE,WACpB/C,EAAmB6C,EAAIG,IAKvBzC,EAAc,IACd,IAAI0C,EAAO,GACXlC,QAAQC,IAAI,mCAAoCf,GAChDA,EAAkBiD,SAAQ,SAACC,GACzBF,EAAKG,KAAKD,EAAItB,YACdd,QAAQC,IAAIiC,MAEd1C,EAAc0C,GAEdlC,QAAQC,IAAI,qBAAsBV,GAee+C,CAAUV,IAAjD,SAEE,+BAAOA,EAAQI,aAFPJ,EAAQW,WASxB,eAAC/E,EAAD,CAAWI,OAAQgB,EAAaf,eAAgB,WAAQgB,GAAe,IAAvE,UACE,6BAAKC,IACL,6BAAKE,IAOP,sBAAK0C,UAAU,mBAAf,UACA,uBAAMA,UAAU,qBAAhB,UACI,4CACA,6CAEF,uBAAMA,UAAU,gBAAhB,UACE,6BAAKjC,IACL,6BAAKE,UAGP,qBAAK+B,UAAU,cAAf,SACA,cAAC,IAAD,CACE7B,SAAU,SAACR,EAAOmD,GAAY3C,EAASR,IACvCA,MAAOA,YAxCR,8CC1GIoD,MATf,WACE,OACE,qBAAKf,UAAU,MAAf,SAEC,cAAC,EAAD,OCGUgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1b08da14.chunk.js","sourcesContent":["import React, { Children } from 'react'\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\nfunction ModalView(props) {\r\n    return (\r\n        <div>\r\n            <Modal isOpen={props.isOpen} onRequestClose={props.onRequestClose}\r\n            style={{\r\n                overlay:{\r\n                    backgroundColor:'rgba(0,0,0,0.7)'\r\n                },\r\n                content:{\r\n                    color:'black'\r\n                }\r\n\r\n            }}\r\n            >\r\n               {props.children}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalView\r\n","import React, { useEffect, useState } from 'react';\r\nimport ModalView from './Modal';\r\nimport './UserList.css';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\n\r\nfunction UserList() {\r\n\r\n  // const [val,setVal]=useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [employeeName, setEmployeeName] = useState('');\r\n  const [employeeCountry, setEmployeeCountry] = useState('');\r\n  let [employeeTimeArray, setEmployeeTimeArray] = useState([]);\r\n  const [value, setValue] = useState(new Date());\r\n  let [inputArray, setInputArray] = useState([]);\r\n  const [startTime, setStartTime] = useState('Data not avalailable');\r\n  const [endTime, setendTime] = useState('Data not avalailable');\r\n  // let inputArray = [];\r\n\r\n\r\n  const transformDate = (date) => {\r\n    console.log(date);\r\n    let tempdate = date.split(' ')\r\n    const newTempDate = tempdate[0] + ' ' + tempdate[1] + ' ' + tempdate[2]\r\n    // console.log('temp date',newTempDate);\r\n    return newTempDate\r\n  }\r\n\r\n  const onChange = (v, e) => {\r\n    console.log('called', v);\r\n    setValue(v);\r\n\r\n    const formattedDate = v.toLocaleDateString('en-US', {\r\n      month: 'short', day: 'numeric', year: 'numeric'\r\n    }).replace(/ /g, ' ').replace(',', '');\r\n\r\n\r\n    console.log(formattedDate);\r\n\r\n    console.log(employeeTimeArray);\r\n    let findResult = [];\r\n    findResult = employeeTimeArray.filter(employeeTimeArray => transformDate(employeeTimeArray.start_time) === formattedDate);\r\n    console.log(findResult);\r\n    if (findResult.length > 0) {\r\n      setStartTime(findResult[0].start_time.split(' ')[4]);\r\n      setendTime(findResult[0].end_time.split(' ')[3])\r\n    }\r\n    else {\r\n      setStartTime('Data not available');\r\n      setendTime('Data not available')\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    fetch('Test JSON.json', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      }\r\n\r\n    }).then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result.members);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  const openModal = (emp) => {\r\n    // console.log('clicked');\r\n\r\n    // setEmployeeTimeArray((employeeTimeArray)=>{\r\n    //   console.log('insideState',emp.activity_periods);\r\n    //   emp.activity_periods.forEach((ele)=>{\r\n    //     employeeTimeArray.push(ele.start_time)\r\n    //   })\r\n    //   return employeeTimeArray;\r\n    // });\r\n\r\n\r\n    setEmployeeTimeArray(emp.activity_periods);\r\n    console.log('new time arrayis', employeeTimeArray);\r\n\r\n    console.log('employeeeis', emp);\r\n    setModalIsOpen(true);\r\n    setEmployeeName(emp.real_name)\r\n    setEmployeeCountry(emp.tz)\r\n    // setEmployeeTimeArray(emp.activity_periods);\r\n\r\n    // console.log('after update',employeeTimeArray);\r\n\r\n    setInputArray([]);\r\n    let temp = [];\r\n    console.log(\"after setting employeetime array\", employeeTimeArray);\r\n    employeeTimeArray.forEach((ele) => {\r\n      temp.push(ele.start_time);\r\n      console.log(temp);\r\n    })\r\n    setInputArray(temp);\r\n\r\n    console.log('input array is now', inputArray);\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  else {\r\n    return (\r\n      <div>\r\n        <div className=\"ulDiv\">\r\n        <ul>\r\n          {\r\n            items.map((element) => (\r\n              <div key={element.id} onClick={() => { openModal(element); }}>\r\n                {/* <span>{element.id}</span> */}\r\n                <span>{element.real_name}</span>\r\n\r\n              </div>\r\n            ))\r\n          }\r\n        </ul>\r\n        </div>\r\n        <ModalView isOpen={modalIsOpen} onRequestClose={() => { setModalIsOpen(false) }}>\r\n          <h2>{employeeName}</h2>\r\n          <h4>{employeeCountry}</h4>\r\n          {/* {\r\n          employeeTimeArray.map((times)=>(\r\n            <h3>{times.start_time}</h3>\r\n          ))\r\n          \r\n        } */}\r\n        <div className=\"timeContainerDiv\">\r\n        <span className=\"startEndTimesLabel\">\r\n            <h3>Start Time</h3>\r\n            <h3>End Time</h3>\r\n          </span>\r\n          <span className=\"startEndTimes\">\r\n            <h3>{startTime}</h3>\r\n            <h3>{endTime}</h3>\r\n          </span>\r\n        </div>\r\n          <div className=\"calendarDiv\">\r\n          <Calendar\r\n            onChange={(value, event) => { onChange(value, event) }}\r\n            value={value}\r\n          />\r\n          </div>\r\n          {\r\n\r\n          }\r\n        </ModalView>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","\nimport './App.css';\nimport UserList from './components/UserList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/* <h1>Hello</h1> */}\n     <UserList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}